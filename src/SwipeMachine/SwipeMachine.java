package SwipeMachine;

import java.applet.Applet;
import java.applet.AudioClip;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 * @author Thomas Goodman
 */
public class SwipeMachine extends javax.swing.JFrame {

    
    //get current date time with Date()
    

    //String currentUsersDocumentsDir = FileSystemView.getFileSystemView().getDefaultDirectory().getPath();

    /**
     * Creates new form SwipeMachine
     */
    public SwipeMachine() {
        this.dateTimeFormat = new SimpleDateFormat("dd.MM.yyyy.HHmm");
        initComponents();
        checkFoldersExist();
        initMyComponents();
        

        StyledDocument doc = aboutDialogTextPane.getStyledDocument();
        SimpleAttributeSet center = new SimpleAttributeSet();
        StyleConstants.setAlignment(center, StyleConstants.ALIGN_CENTER);
        doc.setParagraphAttributes(0, doc.getLength(), center, false);
        
//        importFileChooser.setCurrentDirectory(new File(FileSystemView.getFileSystemView().getDefaultDirectory().getPath()));
//
//        saveFileChooser.setCurrentDirectory(new File(swipeMachinePath.toString()));
//        saveFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
//        saveFileChooser.addChoosableFileFilter(new FileNameExtensionFilter("(Comma Seperated Values) (*.csv)", "csv"));
//        saveFileChooser.setAcceptAllFileFilterUsed(true);
        
//        DateFormat dateFormat = new SimpleDateFormat("ddMMyyyyHHmmss");
//        //get current date time with Date()
//        Date date = new Date();
//        System.out.println(dateFormat.format(date));
//        System.out.println(currentUsersHomeDir);
//        System.out.println(FileSystemView.getFileSystemView().getDefaultDirectory().getPath());
//        System.out.println(currentUsersDocumentsDir);
    }
    
    public void initMyComponents() {
        
        date = new Date();
        
        currentUsersHomeDir = System.getProperty("user.home");
        
        importFileChooser = new JFileChooser();
        importFileChooser.setCurrentDirectory(new File(FileSystemView.getFileSystemView().getDefaultDirectory().getPath()));

        saveFileChooser = new JFileChooser();
        saveFileChooser.setCurrentDirectory(new File(swipeMachinePath.toString()));
        saveFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        saveFileChooser.addChoosableFileFilter(new FileNameExtensionFilter("(Comma Seperated Values) (*.csv)", "csv"));
        saveFileChooser.setAcceptAllFileFilterUsed(true);
        
        nomRollArray = new ArrayList<Person>();
        swipedInArray = new ArrayList<Person>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        aboutDialogBox = new javax.swing.JDialog();
        aboutDialogBoxPanel = new javax.swing.JPanel();
        aboutDialogLabel = new javax.swing.JLabel();
        aboutDialogTextPane = new javax.swing.JTextPane();
        topPanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        infoLabel = new javax.swing.JLabel();
        leftSidePanel = new javax.swing.JPanel();
        swipedMembersButtonPanel = new javax.swing.JPanel();
        removedLastSwipedButton = new javax.swing.JButton();
        removeSelectedButton = new javax.swing.JButton();
        membersListButtonPanel = new javax.swing.JPanel();
        importListButton = new javax.swing.JButton();
        clearListButton = new javax.swing.JButton();
        actionsButtonPanel = new javax.swing.JPanel();
        saveButton = new javax.swing.JButton();
        quorumMetPanel = new javax.swing.JPanel();
        quorumMetLabel = new javax.swing.JLabel();
        informationPanel = new javax.swing.JPanel();
        meetingNameLabel = new javax.swing.JLabel();
        meetingNameTextField = new javax.swing.JTextField();
        dateOfMeetingLabel = new javax.swing.JLabel();
        noOfMembersLabel = new javax.swing.JLabel();
        noOfMembersFormattedTextField = new javax.swing.JFormattedTextField();
        percentForQuorumSpinner = new javax.swing.JSpinner();
        percentForQuorumLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        noRequiredFormattedTextField = new javax.swing.JFormattedTextField();
        swipedNoText = new javax.swing.JTextField();
        swipedNoLabel = new javax.swing.JLabel();
        dateOfMeeting = new org.jdesktop.swingx.JXDatePicker();
        centerPanel = new javax.swing.JPanel();
        swipedMembersLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        swipedMembersList = new javax.swing.JList<>();
        swipedMembersInputText = new javax.swing.JTextField();
        inputLabel = new javax.swing.JLabel();
        rightSidePanel = new javax.swing.JPanel();
        memebersListLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        membersList = new javax.swing.JList<>();
        doubleClickLabel = new javax.swing.JLabel();
        topMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        importMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        aboutDialogBox.setTitle("Information");
        aboutDialogBox.setLocation(new java.awt.Point(100, 100));

        aboutDialogBoxPanel.setMinimumSize(new java.awt.Dimension(340, 300));
        aboutDialogBoxPanel.setPreferredSize(new java.awt.Dimension(340, 200));
        aboutDialogBoxPanel.setLayout(new java.awt.GridBagLayout());

        aboutDialogLabel.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        aboutDialogLabel.setText("Swipe Machine v1.1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(16, 0, 16, 0);
        aboutDialogBoxPanel.add(aboutDialogLabel, gridBagConstraints);

        aboutDialogTextPane.setEditable(false);
        aboutDialogTextPane.setBorder(null);
        aboutDialogTextPane.setContentType("text/html");
        aboutDialogTextPane.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        aboutDialogTextPane.setText("<html><center><p style=\"font-family: Calibri, sanserif; font-size:14pt\">Created By:<br>Thomas Goodman<br><br>For any problems:<br>Email: thomas.goodman@nzdf.mil.nz<br>Call: 021 1221 564</p></center></html>");
        aboutDialogTextPane.setPreferredSize(new java.awt.Dimension(200, 180));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        aboutDialogBoxPanel.add(aboutDialogTextPane, gridBagConstraints);

        javax.swing.GroupLayout aboutDialogBoxLayout = new javax.swing.GroupLayout(aboutDialogBox.getContentPane());
        aboutDialogBox.getContentPane().setLayout(aboutDialogBoxLayout);
        aboutDialogBoxLayout.setHorizontalGroup(
            aboutDialogBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutDialogBoxLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(aboutDialogBoxPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)
                .addContainerGap())
        );
        aboutDialogBoxLayout.setVerticalGroup(
            aboutDialogBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutDialogBoxLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(aboutDialogBoxPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Swipe Machine v1.1");
        setExtendedState(MAXIMIZED_BOTH);
        setMinimumSize(new java.awt.Dimension(1000, 700));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        titleLabel.setFont(new java.awt.Font("Calibri", 1, 30)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Swipe Machine v1.1");

        infoLabel.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        infoLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        infoLabel.setText("Please swipe your card and check your name is added to the list below");

        leftSidePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        leftSidePanel.setMaximumSize(new java.awt.Dimension(760, 32767));

        swipedMembersButtonPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)), "Swiped Members List", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14))); // NOI18N
        swipedMembersButtonPanel.setLayout(new java.awt.GridBagLayout());

        removedLastSwipedButton.setText("Remove Last");
        removedLastSwipedButton.setMinimumSize(new java.awt.Dimension(120, 40));
        removedLastSwipedButton.setPreferredSize(new java.awt.Dimension(120, 40));
        removedLastSwipedButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                removedLastSwipedButtonMouseReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        swipedMembersButtonPanel.add(removedLastSwipedButton, gridBagConstraints);

        removeSelectedButton.setText("Remove Selected");
        removeSelectedButton.setMinimumSize(new java.awt.Dimension(130, 40));
        removeSelectedButton.setPreferredSize(new java.awt.Dimension(130, 40));
        removeSelectedButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                removeSelectedButtonMouseReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        swipedMembersButtonPanel.add(removeSelectedButton, gridBagConstraints);

        membersListButtonPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)), "Members List", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14))); // NOI18N
        membersListButtonPanel.setLayout(new java.awt.GridBagLayout());

        importListButton.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        importListButton.setText("Import");
        importListButton.setMinimumSize(new java.awt.Dimension(120, 40));
        importListButton.setPreferredSize(new java.awt.Dimension(120, 40));
        importListButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                importListButtonMouseClicked(evt);
            }
        });
        membersListButtonPanel.add(importListButton, new java.awt.GridBagConstraints());

        clearListButton.setText("Clear List");
        clearListButton.setMinimumSize(new java.awt.Dimension(120, 40));
        clearListButton.setPreferredSize(new java.awt.Dimension(120, 40));
        clearListButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                clearListButtonMouseReleased(evt);
            }
        });
        membersListButtonPanel.add(clearListButton, new java.awt.GridBagConstraints());

        actionsButtonPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)), "Actions", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14))); // NOI18N
        actionsButtonPanel.setLayout(new java.awt.GridBagLayout());

        saveButton.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        saveButton.setText("Save");
        saveButton.setMinimumSize(new java.awt.Dimension(120, 60));
        saveButton.setPreferredSize(new java.awt.Dimension(120, 60));
        saveButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveButtonMouseClicked(evt);
            }
        });
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        actionsButtonPanel.add(saveButton, gridBagConstraints);

        quorumMetPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)), "Quorum Met", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14))); // NOI18N
        quorumMetPanel.setLayout(new java.awt.GridBagLayout());

        quorumMetLabel.setFont(new java.awt.Font("Calibri", 1, 30)); // NOI18N
        quorumMetLabel.setForeground(new java.awt.Color(255, 0, 50));
        quorumMetLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        quorumMetLabel.setText("QUORUM NOT MET");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipady = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        quorumMetPanel.add(quorumMetLabel, gridBagConstraints);

        informationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)), "Information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 14))); // NOI18N
        informationPanel.setLayout(new java.awt.GridBagLayout());

        meetingNameLabel.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        meetingNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        meetingNameLabel.setText("Meeting Name:");
        meetingNameLabel.setMaximumSize(new java.awt.Dimension(110, 20));
        meetingNameLabel.setPreferredSize(new java.awt.Dimension(110, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        informationPanel.add(meetingNameLabel, gridBagConstraints);

        meetingNameTextField.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        meetingNameTextField.setToolTipText("Please enter your meeting name here");
        meetingNameTextField.setMaximumSize(new java.awt.Dimension(150, 25));
        meetingNameTextField.setMinimumSize(new java.awt.Dimension(150, 25));
        meetingNameTextField.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        informationPanel.add(meetingNameTextField, gridBagConstraints);

        dateOfMeetingLabel.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        dateOfMeetingLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        dateOfMeetingLabel.setText("Date of Meeting:");
        dateOfMeetingLabel.setMaximumSize(new java.awt.Dimension(110, 20));
        dateOfMeetingLabel.setPreferredSize(new java.awt.Dimension(110, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        informationPanel.add(dateOfMeetingLabel, gridBagConstraints);

        noOfMembersLabel.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        noOfMembersLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        noOfMembersLabel.setText("# of Members:");
        noOfMembersLabel.setMaximumSize(new java.awt.Dimension(110, 20));
        noOfMembersLabel.setPreferredSize(new java.awt.Dimension(110, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        informationPanel.add(noOfMembersLabel, gridBagConstraints);

        noOfMembersFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        noOfMembersFormattedTextField.setToolTipText("This number will update when importing a list");
        noOfMembersFormattedTextField.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);
        noOfMembersFormattedTextField.setMaximumSize(new java.awt.Dimension(150, 25));
        noOfMembersFormattedTextField.setMinimumSize(new java.awt.Dimension(150, 25));
        noOfMembersFormattedTextField.setPreferredSize(new java.awt.Dimension(150, 25));
        noOfMembersFormattedTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                noOfMembersFormattedTextFieldKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        informationPanel.add(noOfMembersFormattedTextField, gridBagConstraints);

        percentForQuorumSpinner.setModel(new javax.swing.SpinnerNumberModel(30, 0, 100, 1));
        percentForQuorumSpinner.setToolTipText("Enter the percentage required to meet a quorum");
        percentForQuorumSpinner.setMaximumSize(new java.awt.Dimension(150, 28));
        percentForQuorumSpinner.setMinimumSize(new java.awt.Dimension(150, 28));
        percentForQuorumSpinner.setPreferredSize(new java.awt.Dimension(150, 28));
        percentForQuorumSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                percentForQuorumSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        informationPanel.add(percentForQuorumSpinner, gridBagConstraints);

        percentForQuorumLabel.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        percentForQuorumLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        percentForQuorumLabel.setText("% for quorum:");
        percentForQuorumLabel.setMaximumSize(new java.awt.Dimension(110, 20));
        percentForQuorumLabel.setPreferredSize(new java.awt.Dimension(110, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        informationPanel.add(percentForQuorumLabel, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel3.setText("# required:");
        jLabel3.setMaximumSize(new java.awt.Dimension(110, 20));
        jLabel3.setPreferredSize(new java.awt.Dimension(110, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        informationPanel.add(jLabel3, gridBagConstraints);

        noRequiredFormattedTextField.setEditable(false);
        noRequiredFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        noRequiredFormattedTextField.setToolTipText("This is the number of members required for a quorum");
        noRequiredFormattedTextField.setMaximumSize(new java.awt.Dimension(150, 25));
        noRequiredFormattedTextField.setMinimumSize(new java.awt.Dimension(150, 25));
        noRequiredFormattedTextField.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        informationPanel.add(noRequiredFormattedTextField, gridBagConstraints);

        swipedNoText.setEditable(false);
        swipedNoText.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        swipedNoText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        swipedNoText.setText("0");
        swipedNoText.setMaximumSize(new java.awt.Dimension(150, 40));
        swipedNoText.setMinimumSize(new java.awt.Dimension(150, 40));
        swipedNoText.setPreferredSize(new java.awt.Dimension(150, 40));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        informationPanel.add(swipedNoText, gridBagConstraints);

        swipedNoLabel.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        swipedNoLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        swipedNoLabel.setText("Swiped:");
        swipedNoLabel.setMaximumSize(new java.awt.Dimension(110, 40));
        swipedNoLabel.setPreferredSize(new java.awt.Dimension(110, 40));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        informationPanel.add(swipedNoLabel, gridBagConstraints);

        dateOfMeeting.setPreferredSize(new java.awt.Dimension(150, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 0);
        informationPanel.add(dateOfMeeting, gridBagConstraints);

        javax.swing.GroupLayout leftSidePanelLayout = new javax.swing.GroupLayout(leftSidePanel);
        leftSidePanel.setLayout(leftSidePanelLayout);
        leftSidePanelLayout.setHorizontalGroup(
            leftSidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftSidePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(leftSidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(membersListButtonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(quorumMetPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(informationPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE)
                    .addComponent(swipedMembersButtonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(actionsButtonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        leftSidePanelLayout.setVerticalGroup(
            leftSidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftSidePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(informationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(quorumMetPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(membersListButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(swipedMembersButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(actionsButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(203, Short.MAX_VALUE))
        );

        centerPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));

        swipedMembersLabel.setFont(new java.awt.Font("Calibri", 1, 30)); // NOI18N
        swipedMembersLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        swipedMembersLabel.setText("Swiped Members");

        swipedMembersList.setFont(new java.awt.Font("Calibri", 1, 36)); // NOI18N
        swipedMembersList.setModel(swipeListModel);
        swipedMembersList.setToolTipText("Swiped members names will appear here once swiped");
        jScrollPane1.setViewportView(swipedMembersList);

        swipedMembersInputText.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        swipedMembersInputText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                swipedMembersInputTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                swipedMembersInputTextKeyReleased(evt);
            }
        });

        inputLabel.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        inputLabel.setText("Input:");

        javax.swing.GroupLayout centerPanelLayout = new javax.swing.GroupLayout(centerPanel);
        centerPanel.setLayout(centerPanelLayout);
        centerPanelLayout.setHorizontalGroup(
            centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(centerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(swipedMembersInputText, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(swipedMembersLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(centerPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(inputLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        centerPanelLayout.setVerticalGroup(
            centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(centerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(swipedMembersLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(swipedMembersInputText, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        rightSidePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        rightSidePanel.setMinimumSize(new java.awt.Dimension(273, 300));

        memebersListLabel.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        memebersListLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        memebersListLabel.setText("Members List");

        membersList.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        membersList.setModel(nomRollListModel);
        membersList.setToolTipText("Members from the list you ave loaded show here");
        membersList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                membersListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(membersList);

        doubleClickLabel.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        doubleClickLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        doubleClickLabel.setText("Double Click to Add");

        javax.swing.GroupLayout rightSidePanelLayout = new javax.swing.GroupLayout(rightSidePanel);
        rightSidePanel.setLayout(rightSidePanelLayout);
        rightSidePanelLayout.setHorizontalGroup(
            rightSidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightSidePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rightSidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(doubleClickLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(memebersListLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        rightSidePanelLayout.setVerticalGroup(
            rightSidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightSidePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(memebersListLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(doubleClickLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2)
                .addContainerGap())
        );

        javax.swing.GroupLayout topPanelLayout = new javax.swing.GroupLayout(topPanel);
        topPanel.setLayout(topPanelLayout);
        topPanelLayout.setHorizontalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(topPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 1419, Short.MAX_VALUE)
                            .addComponent(infoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 1419, Short.MAX_VALUE)))
                    .addGroup(topPanelLayout.createSequentialGroup()
                        .addComponent(leftSidePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(centerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rightSidePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        topPanelLayout.setVerticalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(infoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(centerPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(leftSidePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rightSidePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        fileMenu.setText("File");

        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        importMenuItem.setText("Import List");
        importMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(importMenuItem);

        saveMenuItem.setText("Save");
        saveMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveMenuItemMouseClicked(evt);
            }
        });
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        topMenuBar.add(fileMenu);

        helpMenu.setText("Help");

        aboutMenuItem.setText("About");
        aboutMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                aboutMenuItemMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                aboutMenuItemMouseReleased(evt);
            }
        });
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        topMenuBar.add(helpMenu);

        setJMenuBar(topMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(topPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(topPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        JOptionPane.showMessageDialog(null, "This does nothing right now", "Open", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void importMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importMenuItemActionPerformed
        importList();
    }//GEN-LAST:event_importMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
//        JOptionPane.showMessageDialog(null, "This does nothing right now", "Save", JOptionPane.PLAIN_MESSAGE);
        saveToTextFile();
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        if (evt.getSource() == exitMenuItem) {

            int reply = JOptionPane.showConfirmDialog(null, "Are you sure you want to exit?", "Exit Program?", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE);
            if (reply == JOptionPane.YES_OPTION) {
                System.exit(0);
            }
        }
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void swipedMembersInputTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_swipedMembersInputTextKeyPressed
        swipedMembersInputText.requestFocus();
    }//GEN-LAST:event_swipedMembersInputTextKeyPressed

    private void swipedMembersInputTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_swipedMembersInputTextKeyReleased
        int keyCode = evt.getKeyCode();
        if (keyCode == KeyEvent.VK_ENTER) {
            inputString = swipedMembersInputText.getText();
            //System.out.println(convertToServiceNo(inputString));

            addToSwipeList(convertToServiceNo(inputString));

            swipedMembersInputText.setText("");
        }
    }//GEN-LAST:event_swipedMembersInputTextKeyReleased

    private void membersListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_membersListMouseClicked
        if (evt.getClickCount() == 2) {
//            System.out.println("Double click");
            if (membersList.getSelectedValue() != null) {
                addToSwipeList(membersList.getSelectedValue().getServiceNo());
            }
        }

        swipedMembersInputText.requestFocus();
    }//GEN-LAST:event_membersListMouseClicked

    private void saveMenuItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveMenuItemMouseClicked
        saveToTextFile();
    }//GEN-LAST:event_saveMenuItemMouseClicked

    private void aboutMenuItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aboutMenuItemMouseClicked
//        aboutDialogBox.setVisible(true);
    }//GEN-LAST:event_aboutMenuItemMouseClicked

    private void aboutMenuItemMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aboutMenuItemMouseReleased
        aboutDialogBox.pack();
        aboutDialogBox.setVisible(true);
    }//GEN-LAST:event_aboutMenuItemMouseReleased

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
//        int confirmed = JOptionPane.showConfirmDialog(null, 
//        "Are you sure you want to exit the program?", "Exit Program Message Box",
//        JOptionPane.YES_NO_OPTION);
//
//        if (confirmed == JOptionPane.YES_OPTION) {
//          dispose();
//        }
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        int confirmed = JOptionPane.showConfirmDialog(null,
                "Are you sure you want to exit the program?", "Exit Program",
                JOptionPane.YES_NO_OPTION);

        if (confirmed == JOptionPane.YES_OPTION) {
            dispose();
        }
    }//GEN-LAST:event_formWindowClosing

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_saveButtonActionPerformed

    private void saveButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveButtonMouseClicked
        saveToTextFile();
    }//GEN-LAST:event_saveButtonMouseClicked

    private void clearListButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearListButtonMouseReleased
        clearMemberList();
    }//GEN-LAST:event_clearListButtonMouseReleased

    private void importListButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_importListButtonMouseClicked
        importList();
    }//GEN-LAST:event_importListButtonMouseClicked

    private void removeSelectedButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeSelectedButtonMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_removeSelectedButtonMouseReleased

    private void removedLastSwipedButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removedLastSwipedButtonMouseReleased
        removeLastSwiped();
    }//GEN-LAST:event_removedLastSwipedButtonMouseReleased

    private void percentForQuorumSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_percentForQuorumSpinnerStateChanged
        //System.out.println(evt.getSource());
        updateCount();
        swipedMembersInputText.requestFocus();
    }//GEN-LAST:event_percentForQuorumSpinnerStateChanged

    private void noOfMembersFormattedTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_noOfMembersFormattedTextFieldKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (noOfMembersFormattedTextField.isEditValid()) {
                nomRollCount = Integer.parseInt(noOfMembersFormattedTextField.getText());
            } else {
                noOfMembersFormattedTextField.setText(Integer.toString(nomRollCount));
            }

            swipedMembersInputText.requestFocus();
            updateCount();
        }
    }//GEN-LAST:event_noOfMembersFormattedTextFieldKeyReleased

    private void dateOfMeetingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateOfMeetingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dateOfMeetingActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    
    /*
    Checks if a folder in Documents "Swipe Machine" exists
    If not then create it    
    Gets run when program starts
    */
    
    public void checkFoldersExist () {
        //this.currentUsersDocumentsDir = FileSystemView.getFileSystemView().getDefaultDirectory().getPath();
        
        // these are for JDK14
//        swipeMachinePath = Path.of(FileSystemView.getFileSystemView().getDefaultDirectory().getPath() + "\\Swipe Machine");
//        backupPath = Path.of(FileSystemView.getFileSystemView().getDefaultDirectory().getPath() + "\\Swipe Machine\\Backup");

        //these are for JDK8
        swipeMachinePath = Paths.get(FileSystemView.getFileSystemView().getDefaultDirectory().getPath() + "\\Swipe Machine");
        backupPath = Paths.get(FileSystemView.getFileSystemView().getDefaultDirectory().getPath() + "\\Swipe Machine\\Backup");
//        System.out.println(swipeMachinePath);
//        System.out.println(backupPath);
        
        
        try {
            if (Files.notExists(swipeMachinePath)) {
                Files.createDirectory(swipeMachinePath);
            }
            if (Files.notExists(backupPath)) {
                Files.createDirectory(backupPath);
            }
        }
        catch (IOException ex) {
            Logger.getLogger(SwipeMachine.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    public void importList() {
//        importFileChooser.setCurrentDirectory(new File(FileSystemView.getFileSystemView().getDefaultDirectory().getPath()));
        returnValue = importFileChooser.showOpenDialog(null);

        if (returnValue == JFileChooser.APPROVE_OPTION) {

            File selectedFile = importFileChooser.getSelectedFile();

//                    System.out.println("File chosen");
//                    System.out.println(fileChooser.getName(selectedFile));
//                    System.out.println(fileChooser.getFileFilter().getDescription());
            nomRollArray = makeNomRoll(readFile(selectedFile.getAbsolutePath()));

            Collections.sort(nomRollArray);

            // adds each Person to the list
            for (int i = 0; i < nomRollArray.size(); i++) {
                nomRollListModel.addElement(nomRollArray.get(i));
            }

            nomRollCount = nomRollArray.size();
            updateCount();
        }
    }
    
    // This function clears the Members list on the right hand side.
    public void clearMemberList() {
        int reply = JOptionPane.showConfirmDialog(null, "Are you sure you want to clear the Members List?", "Clear List?", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE);
        if (reply == JOptionPane.YES_OPTION) {
            nomRollArray.clear();
            nomRollListModel.clear();
            updateCount();
        }
    }
    
    // This function will removed the selected member in the Swiped List.
    public void removeSeletedMember(){
        
    }

    public ArrayList<String> readFile(String fileName) {

        ArrayList<String> lines = new ArrayList<>();
        String line = null;

        try {
            FileReader reader = new FileReader(fileName);
            BufferedReader bufferedReader = new BufferedReader(reader);

            while ((line = bufferedReader.readLine()) != null) {
                lines.add(line);
            }

            bufferedReader.close();

        } catch (FileNotFoundException e) {
            System.out.println("Unable to open file! " + e);
        } catch (IOException e) {
            System.out.println("Error reading File!" + e);
        }

        return lines;
    }

    public ArrayList<Person> makeNomRoll(ArrayList<String> stringList) {

        ArrayList<Person> tempPersonList = new ArrayList<>();

        for (int i = 1; i <= stringList.size(); i++) {
            String[] nameArray = stringList.get(i - 1).split(",");

            switch (nameArray.length) {
                case 0: {
                    tempPersonList.add(new Person());
                    break;
                }
                case 1: {
                    tempPersonList.add(new Person(nameArray[0]));
                    break;
                }
                case 2: {
                    tempPersonList.add(new Person(nameArray[0], nameArray[1]));
                    break;
                }
                case 3: {
                    tempPersonList.add(new Person(nameArray[0], nameArray[1], nameArray[2]));
                    break;
                }
                case 4: {
                    tempPersonList.add(new Person(nameArray[0], nameArray[1], nameArray[2], nameArray[3]));
                    break;
                }
            }
        }

        return tempPersonList;
    }

    public String convertToServiceNo(String in) {
        String out = "";

        String[] tempArray = in.split("\\^");

        if (tempArray.length < 3) {
            out = in;
        } else {
            out = tempArray[3].substring(0, (tempArray[3].length() - 1));
        }

        return out;
    }

    public void addToSwipeList(String id) {

        boolean addPerson = true;
        boolean found = false;

        // checks if already on the swipe list
        for (Person swipePer : swipedInArray) {
            if (swipePer.getServiceNo().compareToIgnoreCase(id) == 0) {

                addPerson = false;

                // play reject sound
                try {
//                    AudioClip clip = Applet.newAudioClip(new URL("file", "localhost", "sounds/reject2.wav"));
                    AudioClip clip = Applet.newAudioClip(new URL("file", "localhost", "sounds/Fail_Alert.wav"));
                    clip.play();
                } catch (MalformedURLException ex) {
                    Logger.getLogger(SwipeMachine.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

        if (addPerson) {
            for (Person person : nomRollArray) {
                if (person.getServiceNo().compareToIgnoreCase(id) == 0) {
                    swipedInArray.add(person);
                    swipeListModel.add(0, person);
                    swipedInCount++;
                    swipedNoText.setText(Integer.toString(swipedInCount));

                    backUp(person);

                    // play success sound
                    try {
//                        AudioClip clip = Applet.newAudioClip(new URL("file", "localhost", "sounds/accept2.wav"));
                        AudioClip clip = Applet.newAudioClip(new URL("file", "localhost", "sounds/Success_Alert.wav"));
                        clip.play();
                    } catch (MalformedURLException ex) {
                        Logger.getLogger(SwipeMachine.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    found = true;
                }
            }
        }

        if (id.length() >= 6 && id.length() <= 8 && !found && addPerson) {
            swipedInArray.add(new Person(id.toUpperCase(), "-", "Not In Roll"));
            backUp(swipedInArray.get(swipedInArray.size() - 1));
            swipeListModel.add(0, swipedInArray.get(swipedInArray.size() - 1));
            swipedInCount++;
            swipedNoText.setText(Integer.toString(swipedInCount));

            // play success sound
            try {
                AudioClip clip = Applet.newAudioClip(new URL("file", "localhost", "sounds/accept2.wav"));
                clip.play();
            } catch (MalformedURLException ex) {
                Logger.getLogger(SwipeMachine.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        found = false;

        checkQuorum();
    }

    public void removeLastSwiped() {
        if (swipedInArray.size() > 0) {
            swipedInArray.remove(swipedInArray.size() - 1);
            swipeListModel.remove(0);
            swipedInCount--;
            swipedNoText.setText(Integer.toString(swipedInCount));
            
            updateCount();
            checkQuorum();
        }
    }

    public void removeSelectedSwiped() {

    }

    /** 
    * checkQuorum will check if the current swipedInCount is less
    * than the quorumCount and update the quorumMetLabel accordingly.
    */
    
    public void checkQuorum() {
        if (swipedInCount < quorumCount) {
            quorumMetLabel.setForeground(new Color(255, 0, 50));
            quorumMetLabel.setText("QUORUM NOT MET");
        } else {
            quorumMetLabel.setForeground(new Color(0, 200, 0));
            quorumMetLabel.setText("QUORUM OBTAINED");
        }
    }

    public void updateCount() {
        //nomRollCount = nomRollArray.size();
        quorumCount = (int) (nomRollCount * ((Integer) percentForQuorumSpinner.getValue()) / 100);

//        swipeNoLabel.setText(Integer.toString(swipedInCount));
        noOfMembersFormattedTextField.setText(Integer.toString(nomRollCount));
        noRequiredFormattedTextField.setText(Integer.toString(quorumCount));
    }
    
    public String getExtension(String fileName) {
        String ext = "";
        
        if (fileName != null && !fileName.isEmpty()) {
            int dot = fileName.lastIndexOf(".");
            if ((dot >= 0) && (dot < fileName.length() - 1)) {
                ext = fileName.substring(dot + 1);
            }
        }
        
        return ext;
    }
    
    public String removeExtension(String fileName) {
        String extRemoved = "";
        
        if (fileName != null && !fileName.isEmpty()) {
            int dot = fileName.lastIndexOf(".");
            if ((dot >= 0) && (dot < fileName.length() - 1)) {
                extRemoved = fileName.substring(0, dot);
            }
        }
        
        return extRemoved;
    }

    public void saveToTextFile() {

        String line = null;
        Boolean write = false;
//        File selectedFile;
        int reply = 0;
        
//        saveFileChooser.setCurrentDirectory(new File(swipeMachinePath.toString()));
//        saveFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
//        saveFileChooser.addChoosableFileFilter(new FileNameExtensionFilter("(Comma Seperated Values) (*.csv)", "csv"));
//        saveFileChooser.setAcceptAllFileFilterUsed(true);
        
        returnValue = saveFileChooser.showSaveDialog(null);

        if (returnValue == JFileChooser.APPROVE_OPTION) {
            
            do {
                selectedFile = saveFileChooser.getSelectedFile();
                
                if (selectedFile.exists()) {
                    reply = JOptionPane.showConfirmDialog(null, "Do you want to overwrite the selected file?", "File Exists!", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
                    if (reply == JOptionPane.YES_OPTION) {
                        
//                        System.out.println("before check");
//                        if (getExtension(selectedFile.toString()).equalsIgnoreCase("csv")) {
//                            // file is ok
//                        } else {
//                            selectedFile = new File(selectedFile.getParentFile(), selectedFile.getName() + ".csv");
//                        }
//                        
//                        System.out.println("after check");
//                        
//                        absenteeFile = new File(selectedFile.getParentFile(), selectedFile.getName() + " - ABSETEES.csv");
//                        System.out.println(absenteeFile);
                        
                        write = true;
                    } else if (reply == JOptionPane.NO_OPTION){
                        returnValue = saveFileChooser.showSaveDialog(null);
                    }
                } else {
                    write = true;
                }
            } while (write == false && reply == JOptionPane.NO_OPTION && returnValue == JFileChooser.APPROVE_OPTION);

            if (write) {
                
                System.out.println("before check");
                if (getExtension(selectedFile.toString()).equalsIgnoreCase("csv")) {
                    // file is ok
                } else {
                    selectedFile = new File(selectedFile.getParentFile(), selectedFile.getName() + ".csv");
                }

                System.out.println("after check");

                absenteeFile = new File(selectedFile.getParentFile(), selectedFile.getName() + " - ABSENTEES.csv");
                System.out.println(absenteeFile);
                
                selectedDate = dateOfMeeting.getDate();
                
                try {
                    FileWriter writer = new FileWriter(selectedFile, false);

                    BufferedWriter bufferedWriter = new BufferedWriter(writer);

                    line = "Meeting Name:," + meetingNameTextField.getText();

                    bufferedWriter.write(line);
                    bufferedWriter.newLine();
                    
                    if (selectedDate != null) {
                        line = "Date of meeting:," + selectedDateFormat.format(selectedDate);
                    } else {
                        line = "Date of meeting:," + selectedDateFormat.format(date);
                    }
                    
                    
                    bufferedWriter.write(line);
                    bufferedWriter.newLine();

                    line = "Number of Members:," + noOfMembersFormattedTextField.getText();

                    bufferedWriter.write(line);
                    bufferedWriter.newLine();

                    line = "Quorum %:," + percentForQuorumSpinner.getValue();

                    bufferedWriter.write(line);
                    bufferedWriter.newLine();

                    line = "No. to meet quorum:," + noRequiredFormattedTextField.getText();

                    bufferedWriter.write(line);
                    bufferedWriter.newLine();

                    line = "No. of Swiped Members:," + swipedNoText.getText();

                    bufferedWriter.write(line);
                    bufferedWriter.newLine();
                    bufferedWriter.newLine();

                    line = quorumMetLabel.getText();

                    bufferedWriter.write(line);
                    bufferedWriter.newLine();
                    bufferedWriter.newLine();

                    for (Person per : swipedInArray) {
                        line = per.getServiceNo() + "," + per.getRank() + "," + per.getLastName() + "," + per.getFirstName();

                        bufferedWriter.write(line);
                        bufferedWriter.newLine();
                    }

                    bufferedWriter.flush();
                    bufferedWriter.close();
                    
                    saveAbsentees();
                    
                    JOptionPane.showMessageDialog(null,"Swiped members saved to:\n" + selectedFile.getAbsolutePath() + "\nAbsentees saved to:\n" + absenteeFile.getAbsolutePath(), "Files Saved", JOptionPane.INFORMATION_MESSAGE);

                } catch (FileNotFoundException e) {
                    System.out.println("Unable to find file! " + e);
                } catch (IOException e) {
                    System.out.println("Error writing File!" + e);
                }
            }
        }

    }
    
    
    public void saveAbsentees() {
        
        String line;
                
        try {
            FileWriter writer = new FileWriter(removeExtension(selectedFile.toString()) + " - ABSENTEES.csv", false);

            BufferedWriter bufferedWriter = new BufferedWriter(writer);

            line = "Meeting Name:," + meetingNameTextField.getText();

            bufferedWriter.write(line);
            bufferedWriter.newLine();

            if (selectedDate != null) {
                line = "Date of meeting:," + selectedDateFormat.format(selectedDate);
            } else {
                line = "Date of meeting:," + selectedDateFormat.format(date);
            }


            bufferedWriter.write(line);
            bufferedWriter.newLine();

            line = "Number of Members:," + noOfMembersFormattedTextField.getText();

            bufferedWriter.write(line);
            bufferedWriter.newLine();

            line = "Quorum %:," + percentForQuorumSpinner.getValue();

            bufferedWriter.write(line);
            bufferedWriter.newLine();

            line = "No. to meet quorum:," + noRequiredFormattedTextField.getText();

            bufferedWriter.write(line);
            bufferedWriter.newLine();

            line = "No. of Swiped Members:," + swipedNoText.getText();

            bufferedWriter.write(line);
            bufferedWriter.newLine();
            bufferedWriter.newLine();

            line = "ABSENTEES";

            bufferedWriter.write(line);
            bufferedWriter.newLine();
            bufferedWriter.newLine();

            for (Person per : nomRollArray) {

                if (!swipedInArray.contains(per)) {
                    line = per.getServiceNo() + "," + per.getRank() + "," + per.getLastName() + "," + per.getFirstName();

                    bufferedWriter.write(line);
                    bufferedWriter.newLine();
                }
            }

            bufferedWriter.flush();
            bufferedWriter.close();

        } catch (FileNotFoundException e) {
            System.out.println("Unable to find file! " + e);
        } catch (IOException e) {
            System.out.println("Error writing File!" + e);
        }
    }

    /**********************************************************
     * 
     * This function will back up the current swiped
     * Person to a backup file located in the ./backup/ folder
     * 
     **********************************************************/
    
    public void backUp(Person person) {

//        ArrayList<String> lines = new ArrayList<>();
        String line = null;

//        Collections.sort(swipeArray);
        line = person.getServiceNo() + "," + person.getRank() + "," + person.getLastName() + "," + person.getFirstName();
//            lines.add(line);

        try {
            FileWriter writer;
            if (meetingNameTextField.getText().compareTo("") == 0) {
                writer = new FileWriter(backupPath.toString() + "\\Untitled - " + dateTimeFormat.format(date) + ".csv", true);
            } else {
                writer = new FileWriter(backupPath.toString() + "\\" + meetingNameTextField.getText() + " - " + dateTimeFormat.format(date) + ".csv", true);
            }
            BufferedWriter bufferedWriter = new BufferedWriter(writer);

//            for (String per : lines) {
//                bufferedWriter.write(per);
//                bufferedWriter.newLine();
//            }
            bufferedWriter.write(line);
            bufferedWriter.newLine();

            bufferedWriter.flush();
            bufferedWriter.close();

        } catch (FileNotFoundException e) {
            System.out.println("Unable to find file! " + e);
        } catch (IOException e) {
            System.out.println("Error writing File!" + e);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SwipeMachine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SwipeMachine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SwipeMachine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SwipeMachine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SwipeMachine().setVisible(true);
            }
        });
    }

    // My Variables
    private JFileChooser importFileChooser;
    private JFileChooser saveFileChooser;
    
    private File selectedFile;
    private File absenteeFile;
    private Path swipeMachinePath;
    private Path backupPath;
    
    private int returnValue;
    private int nomRollCount;
    private int quorumCount;
    private int swipedInCount;

    private ArrayList<Person> nomRollArray;
    private ArrayList<Person> swipedInArray;
    private final DefaultListModel<Person> swipeListModel = new DefaultListModel<>();
    private final DefaultListModel<Person> nomRollListModel = new DefaultListModel<>();
    
    private String inputString;
    private String currentUsersHomeDir;
    
    private Date date;
    private DateFormat dateTimeFormat;
    private Date selectedDate;
    private DateFormat selectedDateFormat = new SimpleDateFormat("dd/MM/yyyy");

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog aboutDialogBox;
    private javax.swing.JPanel aboutDialogBoxPanel;
    private javax.swing.JLabel aboutDialogLabel;
    private javax.swing.JTextPane aboutDialogTextPane;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JPanel actionsButtonPanel;
    private javax.swing.JPanel centerPanel;
    private javax.swing.JButton clearListButton;
    private org.jdesktop.swingx.JXDatePicker dateOfMeeting;
    private javax.swing.JLabel dateOfMeetingLabel;
    private javax.swing.JLabel doubleClickLabel;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton importListButton;
    private javax.swing.JMenuItem importMenuItem;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JPanel informationPanel;
    private javax.swing.JLabel inputLabel;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel leftSidePanel;
    private javax.swing.JLabel meetingNameLabel;
    private javax.swing.JTextField meetingNameTextField;
    private javax.swing.JList<Person> membersList;
    private javax.swing.JPanel membersListButtonPanel;
    private javax.swing.JLabel memebersListLabel;
    private javax.swing.JFormattedTextField noOfMembersFormattedTextField;
    private javax.swing.JLabel noOfMembersLabel;
    private javax.swing.JFormattedTextField noRequiredFormattedTextField;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JLabel percentForQuorumLabel;
    private javax.swing.JSpinner percentForQuorumSpinner;
    private javax.swing.JLabel quorumMetLabel;
    private javax.swing.JPanel quorumMetPanel;
    private javax.swing.JButton removeSelectedButton;
    private javax.swing.JButton removedLastSwipedButton;
    private javax.swing.JPanel rightSidePanel;
    private javax.swing.JButton saveButton;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JPanel swipedMembersButtonPanel;
    private javax.swing.JTextField swipedMembersInputText;
    private javax.swing.JLabel swipedMembersLabel;
    private javax.swing.JList<Person> swipedMembersList;
    private javax.swing.JLabel swipedNoLabel;
    private javax.swing.JTextField swipedNoText;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JMenuBar topMenuBar;
    private javax.swing.JPanel topPanel;
    // End of variables declaration//GEN-END:variables
}
